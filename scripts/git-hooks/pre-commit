#!/bin/bash

# Script de pre-commit para OmniChat
# Este script se ejecuta automáticamente antes de cada commit para validar el código

echo "🔍 Ejecutando validaciones pre-commit para OmniChat..."

# Colores para mensajes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Función para mostrar mensajes de error y salir
error_exit() {
    echo -e "${RED}❌ ERROR: $1${NC}"
    exit 1
}

# Función para mostrar mensajes de advertencia
warning() {
    echo -e "${YELLOW}⚠️ ADVERTENCIA: $1${NC}"
}

# Función para mostrar mensajes de éxito
success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# 1. Verificar que no haya claves API expuestas en el código
echo "🔑 Verificando que no haya claves API expuestas en el código..."

# Patrones de claves API comunes
API_PATTERNS=(
    "sk-[a-zA-Z0-9]{48}" # OpenAI API key
    "r[a-zA-Z0-9]{32}" # Mistral API key
    "sk-or-v1-[a-zA-Z0-9]{64}" # OpenRouter API key
    "AIza[a-zA-Z0-9_-]{35}" # Google API key
    "tvly-[a-zA-Z0-9]{32}" # Tavily API key
    "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}" # UUID format (Exa, YOU.com, etc.)
)

# Archivos a excluir de la verificación
EXCLUDE_FILES=(
    ".env"
    "*.env"
    ".streamlit/secrets.toml"
    "secrets.toml.example"
)

# Construir el patrón de exclusión
EXCLUDE_PATTERN=$(printf "|%s" "${EXCLUDE_FILES[@]}")
EXCLUDE_PATTERN=${EXCLUDE_PATTERN:1}

# Obtener los archivos que se van a commitear, excluyendo los archivos binarios y los archivos en la lista de exclusión
FILES_TO_CHECK=$(git diff --cached --name-only --diff-filter=ACM | grep -v -E "($EXCLUDE_PATTERN)" | xargs -I{} file --mime "{}" 2>/dev/null | grep -v "binary" | cut -d: -f1)

if [ -z "$FILES_TO_CHECK" ]; then
    success "No hay archivos para verificar."
else
    # Verificar cada patrón de API key en los archivos
    for PATTERN in "${API_PATTERNS[@]}"; do
        FOUND_FILES=$(grep -l -E "$PATTERN" $FILES_TO_CHECK 2>/dev/null || true)
        if [ ! -z "$FOUND_FILES" ]; then
            error_exit "Se encontraron posibles claves API expuestas en los siguientes archivos:\n$FOUND_FILES\n\nPor favor, mueve las claves API a .streamlit/secrets.toml o a variables de entorno."
        fi
    done
    success "No se encontraron claves API expuestas en el código."
fi

# 2. Verificar que no haya print statements en el código Python
echo "🐍 Verificando que no haya print statements en el código Python..."

PYTHON_FILES=$(echo "$FILES_TO_CHECK" | grep -E "\.py$" || true)
if [ ! -z "$PYTHON_FILES" ]; then
    PRINT_STATEMENTS=$(grep -l "print(" $PYTHON_FILES 2>/dev/null || true)
    if [ ! -z "$PRINT_STATEMENTS" ]; then
        warning "Se encontraron print statements en los siguientes archivos:\n$PRINT_STATEMENTS\n\nConsidera usar logging en lugar de print para mensajes de depuración."
        # No bloqueamos el commit por esto, solo es una advertencia
    else
        success "No se encontraron print statements en el código Python."
    fi
else
    success "No hay archivos Python para verificar."
fi

# 3. Verificar que no haya archivos grandes (>10MB)
echo "📦 Verificando que no haya archivos grandes..."

LARGE_FILES=$(git diff --cached --name-only --diff-filter=ACM | xargs -I{} du -h {} 2>/dev/null | grep -E "^[0-9]{2,}M" || true)
if [ ! -z "$LARGE_FILES" ]; then
    error_exit "Se encontraron archivos grandes (>10MB) que no deberían ser commiteados:\n$LARGE_FILES\n\nConsidera usar .gitignore para excluir estos archivos."
fi
success "No se encontraron archivos grandes."

# 4. Verificar que no haya conflictos de merge sin resolver
echo "🔄 Verificando que no haya conflictos de merge sin resolver..."

CONFLICT_MARKERS=$(git diff --cached | grep -E "^[<>=]{7}" || true)
if [ ! -z "$CONFLICT_MARKERS" ]; then
    error_exit "Se encontraron conflictos de merge sin resolver. Por favor, resuelve los conflictos antes de commitear."
fi
success "No se encontraron conflictos de merge sin resolver."

# 5. Verificar que los archivos Python tengan el formato correcto (si black está instalado)
echo "🎨 Verificando el formato del código Python..."

if command -v black &> /dev/null; then
    if [ ! -z "$PYTHON_FILES" ]; then
        # Verificar si los archivos necesitan ser formateados
        UNFORMATTED_FILES=$(black --check $PYTHON_FILES 2>&1 | grep "would reformat" || true)
        if [ ! -z "$UNFORMATTED_FILES" ]; then
            warning "Los siguientes archivos no tienen el formato correcto según black:\n$UNFORMATTED_FILES\n\nConsidera ejecutar 'black' para formatear el código."
            # No bloqueamos el commit por esto, solo es una advertencia
        else
            success "Todos los archivos Python tienen el formato correcto."
        fi
    fi
else
    warning "black no está instalado. Considera instalarlo para verificar el formato del código Python."
fi

# 6. Verificar que los archivos Python no tengan errores de sintaxis
echo "🔍 Verificando errores de sintaxis en archivos Python..."

if [ ! -z "$PYTHON_FILES" ]; then
    for FILE in $PYTHON_FILES; do
        python -m py_compile "$FILE" 2>/dev/null || error_exit "Error de sintaxis en $FILE. Por favor, corrige los errores antes de commitear."
    done
    success "No se encontraron errores de sintaxis en los archivos Python."
fi

# 7. Verificar que los archivos de texto no tengan espacios en blanco al final de las líneas
echo "✂️ Verificando espacios en blanco al final de las líneas..."

TRAILING_WHITESPACE=$(git diff --cached --name-only --diff-filter=ACM | xargs grep -l "[[:space:]]$" 2>/dev/null || true)
if [ ! -z "$TRAILING_WHITESPACE" ]; then
    warning "Los siguientes archivos tienen espacios en blanco al final de las líneas:\n$TRAILING_WHITESPACE\n\nConsidera eliminar los espacios en blanco innecesarios."
    # No bloqueamos el commit por esto, solo es una advertencia
else
    success "No se encontraron espacios en blanco al final de las líneas."
fi

# Todas las validaciones pasaron
echo -e "${GREEN}✅ Todas las validaciones pre-commit pasaron exitosamente.${NC}"
exit 0
